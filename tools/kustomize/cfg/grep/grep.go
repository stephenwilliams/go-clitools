// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/kustomize.json

package grep

import (
	"fmt"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/kustomize"
)

// [[Alpha] Search for matching Resources in a directory or from stdin.
//
//   QUERY:
//     Query to match expressed as 'path.to.field=value'.
//     Maps and fields are matched as '.field-name' or '.map-key'
//     List elements are matched as '[list-elem-field=field-value]'
//     The value to match is expressed as '=value'
//     '.' as part of a key or value can be escaped as '\.'
func Grep(query string, opts ...GrepOpt) *tools.CommandContext {
	options := &grepOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "cfg", "grep")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, query)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(kustomize.KustomizeToolInfo, defaults.String(options.ToolVersion, kustomize.DefaultToolVersion), options.ToolProvider, kustomize.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// [[Alpha] Search for matching Resources in a directory or from stdin.
//
//   QUERY:
//     Query to match expressed as 'path.to.field=value'.
//     Maps and fields are matched as '.field-name' or '.map-key'
//     List elements are matched as '[list-elem-field=field-value]'
//     The value to match is expressed as '=value'
//     '.' as part of a key or value can be escaped as '\.'
func GrepWithPath(query string, path string, opts ...GrepOpt) *tools.CommandContext {
	options := &grepOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "cfg", "grep")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, query)

	_args = append(_args, path)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(kustomize.KustomizeToolInfo, defaults.String(options.ToolVersion, kustomize.DefaultToolVersion), options.ToolProvider, kustomize.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type GrepOpt func(*grepOptions)

func SetToolProvider(p tools.ToolProvider) GrepOpt {
	return func(opts *grepOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) GrepOpt {
	return func(opts *grepOptions) {
		opts.ToolVersion = v
	}
}

// print resources recursively in all the nested subpackages (default true)
func RecurseSubpackages(value bool) GrepOpt {
	return func(opts *grepOptions) {
		opts.recurseSubpackages = &value
	}
}

// annotate resources with their file origins. (default true)
func Annotate(value bool) GrepOpt {
	return func(opts *grepOptions) {
		opts.annotate = &value
	}
}

// Selected Resources are those not matching any of the specified patterns..
func InvertMatch(value bool) GrepOpt {
	return func(opts *grepOptions) {
		opts.invertMatch = &value
	}
}

// print a stack-trace on error
func StackTrace() GrepOpt {
	return func(opts *grepOptions) {
		opts.stackTrace = ptrhelpers.Bool(true)
	}
}

type grepOptions struct {
	ToolProvider       tools.ToolProvider
	ToolVersion        string
	recurseSubpackages *bool
	annotate           *bool
	invertMatch        *bool
	stackTrace         *bool
}

func (o *grepOptions) toArgs() []string {
	var renderedArgs []string

	if o.recurseSubpackages != nil {
		renderedArgs = append(renderedArgs, "--recurse-subpackages", fmt.Sprintf("%v", ptrhelpers.BoolValue(o.recurseSubpackages)))
	}

	if o.annotate != nil {
		renderedArgs = append(renderedArgs, "--annotate", fmt.Sprintf("%v", ptrhelpers.BoolValue(o.annotate)))
	}

	if o.invertMatch != nil {
		renderedArgs = append(renderedArgs, "--invert-match", fmt.Sprintf("%v", ptrhelpers.BoolValue(o.invertMatch)))
	}

	if o.stackTrace != nil {
		renderedArgs = append(renderedArgs, "--stack-trace")
	}

	return renderedArgs
}
