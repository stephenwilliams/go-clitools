// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/kustomize.json

package label

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/kustomize"
)

// Adds one or more commonAnnotations to kustomization.yaml
func Label(label string, opts ...LabelOpt) *tools.CommandContext {
	options := &labelOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "edit", "add", "label")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, label)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(kustomize.KustomizeToolInfo, defaults.String(options.ToolVersion, kustomize.DefaultToolVersion), options.ToolProvider, kustomize.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// Adds one or more commonAnnotations to kustomization.yaml
func LabelWithLabels(labels []string, opts ...LabelOpt) *tools.CommandContext {
	options := &labelOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "edit", "add", "label")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, labels...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(kustomize.KustomizeToolInfo, defaults.String(options.ToolVersion, kustomize.DefaultToolVersion), options.ToolProvider, kustomize.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type LabelOpt func(*labelOptions)

func SetToolProvider(p tools.ToolProvider) LabelOpt {
	return func(opts *labelOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) LabelOpt {
	return func(opts *labelOptions) {
		opts.ToolVersion = v
	}
}

// overwrite commonAnnotation if it already exists
func Force() LabelOpt {
	return func(opts *labelOptions) {
		opts.force = ptrhelpers.Bool(true)
	}
}

// print a stack-trace on error
func StackTrace() LabelOpt {
	return func(opts *labelOptions) {
		opts.stackTrace = ptrhelpers.Bool(true)
	}
}

type labelOptions struct {
	ToolProvider tools.ToolProvider
	ToolVersion  string
	force        *bool
	stackTrace   *bool
}

func (o *labelOptions) toArgs() []string {
	var renderedArgs []string

	if o.force != nil {
		renderedArgs = append(renderedArgs, "--force")
	}

	if o.stackTrace != nil {
		renderedArgs = append(renderedArgs, "--stack-trace")
	}

	return renderedArgs
}
