// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/kustomize.json

package patch

import (
	"fmt"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/kustomize"
)

// This command will add an item to patches field in the kustomization file.
// Each item may:
//
//  - be either a strategic merge patch, or a JSON patch
//  - be either a file, or an inline string
//  - target a single resource or multiple resources
//
// For more information please see https://kubernetes-sigs.github.io/kustomize/api-reference/kustomization/patches/
func Patch(opts ...PatchOpt) *tools.CommandContext {
	options := &patchOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "edit", "add", "patch")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(kustomize.KustomizeToolInfo, defaults.String(options.ToolVersion, kustomize.DefaultToolVersion), options.ToolProvider, kustomize.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type PatchOpt func(*patchOptions)

func SetToolProvider(p tools.ToolProvider) PatchOpt {
	return func(opts *patchOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) PatchOpt {
	return func(opts *patchOptions) {
		opts.ToolVersion = v
	}
}

// annotationSelector in patch target
func AnnotationSelector(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.annotationSelector = &value
	}
}

// API group in patch target
func Group(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.group = &value
	}
}

// Resource kind in patch target
func Kind(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.kind = &value
	}
}

// labelSelector in patch target
func LabelSelector(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.labelSelector = &value
	}
}

// Resource name in patch target
func Name(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.name = &value
	}
}

// Resource namespace in patch target
func Namespace(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.namespace = &value
	}
}

// Literal string of patch content. Cannot be used with --path at the same time.
func PatchContent(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.patch = &value
	}
}

// Path to the patch file. Cannot be used with --patch at the same time.
func Path(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.path = &value
	}
}

// API version in patch target
func Version(value string) PatchOpt {
	return func(opts *patchOptions) {
		opts.version = &value
	}
}

// print a stack-trace on error
func StackTrace() PatchOpt {
	return func(opts *patchOptions) {
		opts.stackTrace = ptrhelpers.Bool(true)
	}
}

type patchOptions struct {
	ToolProvider       tools.ToolProvider
	ToolVersion        string
	annotationSelector *string
	group              *string
	kind               *string
	labelSelector      *string
	name               *string
	namespace          *string
	patch              *string
	path               *string
	version            *string
	stackTrace         *bool
}

func (o *patchOptions) toArgs() []string {
	var renderedArgs []string

	if o.annotationSelector != nil {
		renderedArgs = append(renderedArgs, "--annotation-selector", fmt.Sprintf("%s", ptrhelpers.StringValue(o.annotationSelector)))
	}

	if o.group != nil {
		renderedArgs = append(renderedArgs, "--group", fmt.Sprintf("%s", ptrhelpers.StringValue(o.group)))
	}

	if o.kind != nil {
		renderedArgs = append(renderedArgs, "--kind", fmt.Sprintf("%s", ptrhelpers.StringValue(o.kind)))
	}

	if o.labelSelector != nil {
		renderedArgs = append(renderedArgs, "--label-selector", fmt.Sprintf("%s", ptrhelpers.StringValue(o.labelSelector)))
	}

	if o.name != nil {
		renderedArgs = append(renderedArgs, "--name", fmt.Sprintf("%s", ptrhelpers.StringValue(o.name)))
	}

	if o.namespace != nil {
		renderedArgs = append(renderedArgs, "--namespace", fmt.Sprintf("%s", ptrhelpers.StringValue(o.namespace)))
	}

	if o.patch != nil {
		renderedArgs = append(renderedArgs, "--patch", fmt.Sprintf("%s", ptrhelpers.StringValue(o.patch)))
	}

	if o.path != nil {
		renderedArgs = append(renderedArgs, "--path", fmt.Sprintf("%s", ptrhelpers.StringValue(o.path)))
	}

	if o.version != nil {
		renderedArgs = append(renderedArgs, "--version", fmt.Sprintf("%s", ptrhelpers.StringValue(o.version)))
	}

	if o.stackTrace != nil {
		renderedArgs = append(renderedArgs, "--stack-trace")
	}

	return renderedArgs
}
