// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/k3d.json

package merge

import (
	"fmt"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/k3d"
)

// Print kubeconfig(s) from cluster(s).
func Merge(opts ...MergeOpt) *tools.CommandContext {
	options := &mergeOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "kubeconfig", "merge")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(k3d.K3dToolInfo, defaults.String(options.ToolVersion, k3d.DefaultToolVersion), options.ToolProvider, k3d.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// Print kubeconfig(s) from cluster(s).
func MergeWithCluster(cluster string, opts ...MergeOpt) *tools.CommandContext {
	options := &mergeOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "kubeconfig", "merge")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, cluster)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(k3d.K3dToolInfo, defaults.String(options.ToolVersion, k3d.DefaultToolVersion), options.ToolProvider, k3d.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// Print kubeconfig(s) from cluster(s).
func MergeWithClusters(clusters []string, opts ...MergeOpt) *tools.CommandContext {
	options := &mergeOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "kubeconfig", "merge")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, clusters...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(k3d.K3dToolInfo, defaults.String(options.ToolVersion, k3d.DefaultToolVersion), options.ToolProvider, k3d.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type MergeOpt func(*mergeOptions)

func SetToolProvider(p tools.ToolProvider) MergeOpt {
	return func(opts *mergeOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) MergeOpt {
	return func(opts *mergeOptions) {
		opts.ToolVersion = v
	}
}

// Get kubeconfigs from all existing clusters
func All() MergeOpt {
	return func(opts *mergeOptions) {
		opts.all = ptrhelpers.Bool(true)
	}
}

// Merge into the default kubeconfig ($KUBECONFIG or ~/.kube/config)
func KubeconfigMergeDefault(value bool) MergeOpt {
	return func(opts *mergeOptions) {
		opts.kubeconfigMergeDefault = &value
	}
}

// Switch to new context (default true)
func KubeconfigSwitchContext(value bool) MergeOpt {
	return func(opts *mergeOptions) {
		opts.kubeconfigSwitchContext = &value
	}
}

// Define output [ - | FILE ] (default from $KUBECONFIG or ~/.kube/config)
func Output(value string) MergeOpt {
	return func(opts *mergeOptions) {
		opts.output = &value
	}
}

// [Careful!] Overwrite existing file, ignoring its contents
func Overwrite() MergeOpt {
	return func(opts *mergeOptions) {
		opts.overwrite = ptrhelpers.Bool(true)
	}
}

// Update conflicting fields in existing kubeconfig (default true)
func Update(value bool) MergeOpt {
	return func(opts *mergeOptions) {
		opts.update = &value
	}
}

// Enable Log timestamps
func Timestamps() MergeOpt {
	return func(opts *mergeOptions) {
		opts.timestamps = ptrhelpers.Bool(true)
	}
}

// Enable super verbose output (trace logging)
func Trace() MergeOpt {
	return func(opts *mergeOptions) {
		opts.trace = ptrhelpers.Bool(true)
	}
}

// Enable verbose output (debug logging)
func Verbose() MergeOpt {
	return func(opts *mergeOptions) {
		opts.verbose = ptrhelpers.Bool(true)
	}
}

type mergeOptions struct {
	ToolProvider            tools.ToolProvider
	ToolVersion             string
	all                     *bool
	kubeconfigMergeDefault  *bool
	kubeconfigSwitchContext *bool
	output                  *string
	overwrite               *bool
	update                  *bool
	timestamps              *bool
	trace                   *bool
	verbose                 *bool
}

func (o *mergeOptions) toArgs() []string {
	var renderedArgs []string

	if o.all != nil {
		renderedArgs = append(renderedArgs, "--all")
	}

	if o.kubeconfigMergeDefault != nil {
		renderedArgs = append(renderedArgs, "--kubeconfig-merge-default", fmt.Sprintf("%t", ptrhelpers.BoolValue(o.kubeconfigMergeDefault)))
	}

	if o.kubeconfigSwitchContext != nil {
		renderedArgs = append(renderedArgs, "--kubeconfig-switch-context", fmt.Sprintf("%t", ptrhelpers.BoolValue(o.kubeconfigSwitchContext)))
	}

	if o.output != nil {
		renderedArgs = append(renderedArgs, "--output", fmt.Sprintf("%s", ptrhelpers.StringValue(o.output)))
	}

	if o.overwrite != nil {
		renderedArgs = append(renderedArgs, "--overwrite")
	}

	if o.update != nil {
		renderedArgs = append(renderedArgs, "--update", fmt.Sprintf("%t", ptrhelpers.BoolValue(o.update)))
	}

	if o.timestamps != nil {
		renderedArgs = append(renderedArgs, "--timestamps")
	}

	if o.trace != nil {
		renderedArgs = append(renderedArgs, "--trace")
	}

	if o.verbose != nil {
		renderedArgs = append(renderedArgs, "--verbose")
	}

	return renderedArgs
}
