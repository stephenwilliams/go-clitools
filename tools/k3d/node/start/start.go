// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/k3d.json

package start

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/k3d"
)

// Start an existing k3d node
func Start(name string, opts ...StartOpt) *tools.CommandContext {
	options := &startOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "node", "start")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, name)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(k3d.K3dToolInfo, defaults.String(options.ToolVersion, k3d.DefaultToolVersion), options.ToolProvider, k3d.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type StartOpt func(*startOptions)

func SetToolProvider(p tools.ToolProvider) StartOpt {
	return func(opts *startOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) StartOpt {
	return func(opts *startOptions) {
		opts.ToolVersion = v
	}
}

// Enable Log timestamps
func Timestamps() StartOpt {
	return func(opts *startOptions) {
		opts.timestamps = ptrhelpers.Bool(true)
	}
}

// Enable super verbose output (trace logging)
func Trace() StartOpt {
	return func(opts *startOptions) {
		opts.trace = ptrhelpers.Bool(true)
	}
}

// Enable verbose output (debug logging)
func Verbose() StartOpt {
	return func(opts *startOptions) {
		opts.verbose = ptrhelpers.Bool(true)
	}
}

type startOptions struct {
	ToolProvider tools.ToolProvider
	ToolVersion  string
	timestamps   *bool
	trace        *bool
	verbose      *bool
}

func (o *startOptions) toArgs() []string {
	var renderedArgs []string

	if o.timestamps != nil {
		renderedArgs = append(renderedArgs, "--timestamps")
	}

	if o.trace != nil {
		renderedArgs = append(renderedArgs, "--trace")
	}

	if o.verbose != nil {
		renderedArgs = append(renderedArgs, "--verbose")
	}

	return renderedArgs
}
