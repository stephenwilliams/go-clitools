// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/goreleaser.json

package release

import (
	"fmt"
	"time"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/goreleaser"
)

func Release(opts ...ReleaseOpt) *tools.CommandContext {
	options := &releaseOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "release")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(goreleaser.GoReleaserToolInfo, defaults.String(options.ToolVersion, goreleaser.DefaultToolVersion), options.ToolProvider, goreleaser.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type ReleaseOpt func(*releaseOptions)

func SetToolProvider(p tools.ToolProvider) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.ToolVersion = v
	}
}

// Load custom release notes footer from a markdown file
func ReleaseFooter(value string) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.releaseFooter = &value
	}
}

// Load custom release notes header from a markdown file
func ReleaseHeader(value string) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.releaseHeader = &value
	}
}

// Load custom release notes from a markdown file
func ReleaseNotes(value string) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.releaseNotes = &value
	}
}

// Skips publishing artifacts
func SkipPublish() ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.skipPublish = ptrhelpers.Bool(true)
	}
}

// Skips signing the artifacts
func SkipSign() ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.skipSign = ptrhelpers.Bool(true)
	}
}

// Skips several sanity checks
func SkipValidate() ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.skipValidate = ptrhelpers.Bool(true)
	}
}

// Load configuration from file
func Config(value string) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.config = &value
	}
}

// Amount tasks to run concurrently
//
//  defaults to the number of logical CPUs usable by the current process
func Parallelism(value int) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.parallelism = &value
	}
}

// Remove the dist folder before building
func RemoveDist() ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.removeDist = ptrhelpers.Bool(true)
	}
}

// Generate an unversioned snapshot build, skipping all validations and without publishing any artifacts
func Snapshot() ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.snapshot = ptrhelpers.Bool(true)
	}
}

// Timeout to the entire build process (default 30m0s)
func Timeout(value time.Duration) ReleaseOpt {
	return func(opts *releaseOptions) {
		opts.timeout = &value
	}
}

type releaseOptions struct {
	ToolProvider  tools.ToolProvider
	ToolVersion   string
	releaseFooter *string
	releaseHeader *string
	releaseNotes  *string
	skipPublish   *bool
	skipSign      *bool
	skipValidate  *bool
	config        *string
	parallelism   *int
	removeDist    *bool
	snapshot      *bool
	timeout       *time.Duration
}

func (o *releaseOptions) toArgs() []string {
	var renderedArgs []string

	if o.releaseFooter != nil {
		renderedArgs = append(renderedArgs, "--release-footer", fmt.Sprintf("%s", ptrhelpers.StringValue(o.releaseFooter)))
	}

	if o.releaseHeader != nil {
		renderedArgs = append(renderedArgs, "--release-header", fmt.Sprintf("%s", ptrhelpers.StringValue(o.releaseHeader)))
	}

	if o.releaseNotes != nil {
		renderedArgs = append(renderedArgs, "--release-notes", fmt.Sprintf("%s", ptrhelpers.StringValue(o.releaseNotes)))
	}

	if o.skipPublish != nil {
		renderedArgs = append(renderedArgs, "--skip-publish")
	}

	if o.skipSign != nil {
		renderedArgs = append(renderedArgs, "--skip-sign")
	}

	if o.skipValidate != nil {
		renderedArgs = append(renderedArgs, "--skip-validate")
	}

	if o.config != nil {
		renderedArgs = append(renderedArgs, "--config", fmt.Sprintf("%s", ptrhelpers.StringValue(o.config)))
	}

	if o.parallelism != nil {
		renderedArgs = append(renderedArgs, "--parallelism", fmt.Sprintf("%d", ptrhelpers.IntValue(o.parallelism)))
	}

	if o.removeDist != nil {
		renderedArgs = append(renderedArgs, "--rm-dist")
	}

	if o.snapshot != nil {
		renderedArgs = append(renderedArgs, "--snapshot")
	}

	if o.timeout != nil {
		renderedArgs = append(renderedArgs, "--timeout", fmt.Sprintf("%s", o.timeout))
	}

	return renderedArgs
}
