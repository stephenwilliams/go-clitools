// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/goreleaser.json

package init

import (
	"fmt"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/goreleaser"
)

// Generates a .goreleaser.yml file
func Init(opts ...InitOpt) *tools.CommandContext {
	options := &initOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "init")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(goreleaser.GoReleaserToolInfo, defaults.String(options.ToolVersion, goreleaser.DefaultToolVersion), options.ToolProvider, goreleaser.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type InitOpt func(*initOptions)

func SetToolProvider(p tools.ToolProvider) InitOpt {
	return func(opts *initOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) InitOpt {
	return func(opts *initOptions) {
		opts.ToolVersion = v
	}
}

// Load configuration from file
func Config(value string) InitOpt {
	return func(opts *initOptions) {
		opts.config = &value
	}
}

type initOptions struct {
	ToolProvider tools.ToolProvider
	ToolVersion  string
	config       *string
}

func (o *initOptions) toArgs() []string {
	var renderedArgs []string

	if o.config != nil {
		renderedArgs = append(renderedArgs, "--config", fmt.Sprintf("%s", ptrhelpers.StringValue(o.config)))
	}

	return renderedArgs
}
