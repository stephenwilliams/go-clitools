// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package fix

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// usage: go fix [packages]
//
// Fix runs the Go fix command on the packages named by the import paths.
//
// For more about fix, see 'go doc cmd/fix'.
// For more about specifying packages, see 'go help packages'.
func Fix(opts ...FixOpt) *tools.CommandContext {
	options := &fixOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "fix")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// usage: go fix [packages]
//
// Fix runs the Go fix command on the packages named by the import paths.
//
// For more about fix, see 'go doc cmd/fix'.
// For more about specifying packages, see 'go help packages'.
func FixWithPackages(packages []string, opts ...FixOpt) *tools.CommandContext {
	options := &fixOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "fix")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, packages...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type FixOpt func(*fixOptions)

func SetToolProvider(p tools.ToolProvider) FixOpt {
	return func(opts *fixOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) FixOpt {
	return func(opts *fixOptions) {
		opts.ToolVersion = v
	}
}

// print the commands but do not run them.
func PrintCommandsOnly() FixOpt {
	return func(opts *fixOptions) {
		opts.printCommandsOnly = ptrhelpers.Bool(true)
	}
}

// print the commands.
func PrintCommands() FixOpt {
	return func(opts *fixOptions) {
		opts.printCommands = ptrhelpers.Bool(true)
	}
}

type fixOptions struct {
	ToolProvider      tools.ToolProvider
	ToolVersion       string
	printCommandsOnly *bool
	printCommands     *bool
}

func (o *fixOptions) toArgs() []string {
	var renderedArgs []string

	if o.printCommandsOnly != nil {
		renderedArgs = append(renderedArgs, "-n")
	}

	if o.printCommands != nil {
		renderedArgs = append(renderedArgs, "-x")
	}

	return renderedArgs
}
