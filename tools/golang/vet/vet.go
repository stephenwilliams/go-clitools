// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package vet

import (
	"fmt"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// Vet runs the Go vet command on the packages named by the import paths.
//
// For more about vet and its flags, see 'go doc cmd/vet'.
// For more about specifying packages, see 'go help packages'.
// For a list of checkers and their flags, see 'go tool vet help'.
// For details of a specific checker such as 'printf', see 'go tool vet help printf'.
func Vet(files []string, opts ...VetOpt) *tools.CommandContext {
	options := &vetOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "vet")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, files...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type VetOpt func(*vetOptions)

func SetToolProvider(p tools.ToolProvider) VetOpt {
	return func(opts *vetOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) VetOpt {
	return func(opts *vetOptions) {
		opts.ToolVersion = v
	}
}

// The -vettool=prog flag selects a different analysis tool with alternative
// or additional checks.
// For example, the 'shadow' analyzer can be built and run using these commands:
//
//   go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow
//   go vet -vettool=$(which shadow)
func VetTool(value string) VetOpt {
	return func(opts *vetOptions) {
		opts.vetTool = &value
	}
}

// print the commands but do not run them.
func PrintCommandsOnly() VetOpt {
	return func(opts *vetOptions) {
		opts.printCommandsOnly = ptrhelpers.Bool(true)
	}
}

// print the commands.
func PrintCommands() VetOpt {
	return func(opts *vetOptions) {
		opts.printCommands = ptrhelpers.Bool(true)
	}
}

type vetOptions struct {
	ToolProvider      tools.ToolProvider
	ToolVersion       string
	vetTool           *string
	printCommandsOnly *bool
	printCommands     *bool
}

func (o *vetOptions) toArgs() []string {
	var renderedArgs []string

	if o.vetTool != nil {
		renderedArgs = append(renderedArgs, fmt.Sprintf("-vettool=\"%s\"", ptrhelpers.StringValue(o.vetTool)))
	}

	if o.printCommandsOnly != nil {
		renderedArgs = append(renderedArgs, "-n")
	}

	if o.printCommands != nil {
		renderedArgs = append(renderedArgs, "-x")
	}

	return renderedArgs
}
