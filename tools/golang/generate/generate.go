// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package generate

import (
	"fmt"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// Generate runs commands described by directives within existing
// files. Those commands can run any process but the intent is to
// create or update Go source files.
//
// Go generate is never run automatically by go build, go get, go test,
// and so on. It must be run explicitly.
func Generate(opts ...GenerateOpt) *tools.CommandContext {
	options := &generateOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "generate")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// Generate runs commands described by directives within existing
// files. Those commands can run any process but the intent is to
// create or update Go source files.
//
// Go generate is never run automatically by go build, go get, go test,
// and so on. It must be run explicitly.
func GenerateWithPackage(pkg string, opts ...GenerateOpt) *tools.CommandContext {
	options := &generateOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "generate")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, pkg)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// Generate runs commands described by directives within existing
// files. Those commands can run any process but the intent is to
// create or update Go source files.
//
// Go generate is never run automatically by go build, go get, go test,
// and so on. It must be run explicitly.
func GenerateWithPackages(pkgs []string, opts ...GenerateOpt) *tools.CommandContext {
	options := &generateOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "generate")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, pkgs...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type GenerateOpt func(*generateOptions)

func SetToolProvider(p tools.ToolProvider) GenerateOpt {
	return func(opts *generateOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) GenerateOpt {
	return func(opts *generateOptions) {
		opts.ToolVersion = v
	}
}

// if non-empty, specifies a regular expression to select
// directives whose full original source text (excluding
// any trailing spaces and final newline) matches the
// expression.
func Run(value string) GenerateOpt {
	return func(opts *generateOptions) {
		opts.run = &value
	}
}

// print the names of packages as they are compiled.
func Verbose() GenerateOpt {
	return func(opts *generateOptions) {
		opts.verbose = ptrhelpers.Bool(true)
	}
}

// print the commands but do not run them.
func PrintCommandsOnly() GenerateOpt {
	return func(opts *generateOptions) {
		opts.printCommandsOnly = ptrhelpers.Bool(true)
	}
}

// print the commands.
func PrintCommands() GenerateOpt {
	return func(opts *generateOptions) {
		opts.printCommands = ptrhelpers.Bool(true)
	}
}

type generateOptions struct {
	ToolProvider      tools.ToolProvider
	ToolVersion       string
	run               *string
	verbose           *bool
	printCommandsOnly *bool
	printCommands     *bool
}

func (o *generateOptions) toArgs() []string {
	var renderedArgs []string

	if o.run != nil {
		renderedArgs = append(renderedArgs, fmt.Sprintf("-run=\"%s\"", ptrhelpers.StringValue(o.run)))
	}

	if o.verbose != nil {
		renderedArgs = append(renderedArgs, "-v")
	}

	if o.printCommandsOnly != nil {
		renderedArgs = append(renderedArgs, "-n")
	}

	if o.printCommands != nil {
		renderedArgs = append(renderedArgs, "-x")
	}

	return renderedArgs
}
