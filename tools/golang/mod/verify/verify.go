// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package verify

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// Verify checks that the dependencies of the current module,
// which are stored in a local downloaded source cache, have not been
// modified since being downloaded. If all the modules are unmodified,
// verify prints "all modules verified." Otherwise it reports which
// modules have been changed and causes 'go mod' to exit with a
// non-zero status.
func Verify(opts ...VerifyOpt) *tools.CommandContext {
	options := &verifyOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "mod", "verify")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type VerifyOpt func(*verifyOptions)

func SetToolProvider(p tools.ToolProvider) VerifyOpt {
	return func(opts *verifyOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) VerifyOpt {
	return func(opts *verifyOptions) {
		opts.ToolVersion = v
	}
}

type verifyOptions struct {
	ToolProvider tools.ToolProvider
	ToolVersion  string
}

func (o *verifyOptions) toArgs() []string {
	var renderedArgs []string

	return renderedArgs
}
