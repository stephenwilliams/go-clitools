// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package init

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// Init initializes and writes a new go.mod to the current directory,
// in effect creating a new module rooted at the current directory.
// The file go.mod must not already exist.
// If possible, init will guess the module path from import comments
// (see 'go help importpath') or from version control configuration.
// To override this guess, supply the module path as an argument.
func Init(module string, opts ...InitOpt) *tools.CommandContext {
	options := &initOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "mod", "init")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, module)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type InitOpt func(*initOptions)

func SetToolProvider(p tools.ToolProvider) InitOpt {
	return func(opts *initOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) InitOpt {
	return func(opts *initOptions) {
		opts.ToolVersion = v
	}
}

type initOptions struct {
	ToolProvider tools.ToolProvider
	ToolVersion  string
}

func (o *initOptions) toArgs() []string {
	var renderedArgs []string

	return renderedArgs
}
