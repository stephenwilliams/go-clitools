// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package download

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// Download downloads the named modules, which can be module patterns selecting
// dependencies of the main module or module queries of the form path@version.
// With no arguments, download applies to all dependencies of the main module
// (equivalent to 'go mod download all').
//
// The go command will automatically download modules as needed during ordinary
// execution. The "go mod download" command is useful mainly for pre-filling
// the local cache or to compute the answers for a Go module proxy.
//
// By default, download writes nothing to standard output. It may print progress
// messages and errors to standard error.
func Download(opts ...DownloadOpt) *tools.CommandContext {
	options := &downloadOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "mod", "download")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type DownloadOpt func(*downloadOptions)

func SetToolProvider(p tools.ToolProvider) DownloadOpt {
	return func(opts *downloadOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) DownloadOpt {
	return func(opts *downloadOptions) {
		opts.ToolVersion = v
	}
}

// causes download to print a sequence of JSON objects
// to standard output, describing each downloaded module (or failure),
// corresponding to this Go struct:
//
//     type Module struct {
//         Path     string // module path
//         Version  string // module version
//         Error    string // error loading module
//         Info     string // absolute path to cached .info file
//         GoMod    string // absolute path to cached .mod file
//         Zip      string // absolute path to cached .zip file
//         Dir      string // absolute path to cached source root directory
//         Sum      string // checksum for path, version (as in go.sum)
//         GoModSum string // checksum for go.mod (as in go.sum)
//     }
func JSON() DownloadOpt {
	return func(opts *downloadOptions) {
		opts.json = ptrhelpers.Bool(true)
	}
}

// print the commands.
func PrintCommands() DownloadOpt {
	return func(opts *downloadOptions) {
		opts.printCommands = ptrhelpers.Bool(true)
	}
}

type downloadOptions struct {
	ToolProvider  tools.ToolProvider
	ToolVersion   string
	json          *bool
	printCommands *bool
}

func (o *downloadOptions) toArgs() []string {
	var renderedArgs []string

	if o.json != nil {
		renderedArgs = append(renderedArgs, "-json")
	}

	if o.printCommands != nil {
		renderedArgs = append(renderedArgs, "-x")
	}

	return renderedArgs
}
