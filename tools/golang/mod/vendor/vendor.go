// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package vendor

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// Vendor resets the main module's vendor directory to include all packages
// needed to build and test all the main module's packages.
// It does not include test code for vendored packages.
func Vendor(opts ...VendorOpt) *tools.CommandContext {
	options := &vendorOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "mod", "vendor")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type VendorOpt func(*vendorOptions)

func SetToolProvider(p tools.ToolProvider) VendorOpt {
	return func(opts *vendorOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) VendorOpt {
	return func(opts *vendorOptions) {
		opts.ToolVersion = v
	}
}

// print the names of vendored modules and packages to standard error.
func Verbose() VendorOpt {
	return func(opts *vendorOptions) {
		opts.verbose = ptrhelpers.Bool(true)
	}
}

type vendorOptions struct {
	ToolProvider tools.ToolProvider
	ToolVersion  string
	verbose      *bool
}

func (o *vendorOptions) toArgs() []string {
	var renderedArgs []string

	if o.verbose != nil {
		renderedArgs = append(renderedArgs, "-v")
	}

	return renderedArgs
}
