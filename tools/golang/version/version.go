// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/go.json

package version

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/golang"
)

// Version prints the build information for Go executables.
//
// Go version reports the Go version used to build each of the named
// executable files.
//
// If no files are named on the command line, go version prints its own
// version information.
func Version(opts ...VersionOpt) *tools.CommandContext {
	options := &versionOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "version")

	_args = append(_args, options.toArgs()...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// Version prints the build information for Go executables.
//
// Go version reports the Go version used to build each of the named
// executable files.
//
// If no files are named on the command line, go version prints its own
// version information.
func VersionWithFile(file string, opts ...VersionOpt) *tools.CommandContext {
	options := &versionOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "version")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, file)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

// Version prints the build information for Go executables.
//
// Go version reports the Go version used to build each of the named
// executable files.
//
// If no files are named on the command line, go version prints its own
// version information.
func VersionWithFiles(files []string, opts ...VersionOpt) *tools.CommandContext {
	options := &versionOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "version")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, files...)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(golang.GoToolInfo, defaults.String(options.ToolVersion, golang.DefaultToolVersion), options.ToolProvider, golang.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type VersionOpt func(*versionOptions)

func SetToolProvider(p tools.ToolProvider) VersionOpt {
	return func(opts *versionOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) VersionOpt {
	return func(opts *versionOptions) {
		opts.ToolVersion = v
	}
}

// If a directory is named, go version walks that directory, recursively,
// looking for recognized Go binaries and reporting their versions.
// By default, go version does not report unrecognized files found
// during a directory scan. The -v flag causes it to report unrecognized files.
func ReportUnrecognizedFiles() VersionOpt {
	return func(opts *versionOptions) {
		opts.reportUnrecognizedFiles = ptrhelpers.Bool(true)
	}
}

// causes go version to print each executable's embedded
// module version information, when available. In the output, the module
// information consists of multiple lines following the version line, each
// indented by a leading tab character.
func ModuleVersionInfo() VersionOpt {
	return func(opts *versionOptions) {
		opts.moduleVersionInfo = ptrhelpers.Bool(true)
	}
}

type versionOptions struct {
	ToolProvider            tools.ToolProvider
	ToolVersion             string
	reportUnrecognizedFiles *bool
	moduleVersionInfo       *bool
}

func (o *versionOptions) toArgs() []string {
	var renderedArgs []string

	if o.reportUnrecognizedFiles != nil {
		renderedArgs = append(renderedArgs, "-v")
	}

	if o.moduleVersionInfo != nil {
		renderedArgs = append(renderedArgs, "-m")
	}

	return renderedArgs
}
