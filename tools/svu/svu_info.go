// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/svu.json

package svu

import (
	"errors"
	"strings"

	"github.com/stephenwilliams/go-clitools/internal/versionproviders"
	"github.com/stephenwilliams/go-clitools/tools"
)

var SVUToolInfo = svuToolInfo{}

type svuToolInfo struct{}

func (svuToolInfo) Name() string {
	return "Semantic Version Util"
}

func (svuToolInfo) ExecutableName() string {
	return "svu"
}

// GetVersion returns the version for the tool found with the provided tool provider.
// If tp is nil, the default tool provider is used.
func (i svuToolInfo) GetVersion(tp tools.ToolProvider) (string, error) {
	if tp != nil {
		// do nothing
	} else if DefaultToolProvider != nil {
		tp = DefaultToolProvider
	} else if tools.DefaultToolProvider != nil {
		tp = tools.DefaultToolProvider
	} else {
		return "", errors.New("no tool provider provided and defaults are nil")
	}

	path, err := tools.ResolveTool(SVUToolInfo, DefaultToolVersion, tp)
	if err != nil {
		return "", err
	}

	return i.GetVersionWithPath(path)
}

// GetVersionWithPath returns the version for the tool found with the provided path.
// to the tool
func (svuToolInfo) GetVersionWithPath(path string) (string, error) {
	cmd := &tools.CommandContext{
		Args: []string{"--version"},
		Path: path,
	}

	var b strings.Builder
	_, _, err := cmd.Exec(&b, &b)
	if err != nil {
		return "", err
	}

	v := b.String()

	v = versionproviders.SplitLine(v, 0)

	v = versionproviders.SplitString(v, " ", 2)

	v = strings.TrimSpace(v)

	return v, nil
}
