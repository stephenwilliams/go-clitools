// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/misspell.json

package misspell

import (
	"fmt"
	"strings"

	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/ptrhelpers"
	"github.com/stephenwilliams/go-clitools/tools"
)

func Misspell(files []string, opts ...MisspellOpt) *tools.CommandContext {
	options := &misspellOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string

	_args = append(_args, options.toArgs()...)
	if len(files) > 0 {
		_args = append(_args, files...)
	}

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(MisspellToolInfo, defaults.String(options.ToolVersion, DefaultToolVersion), options.ToolProvider, DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type MisspellOpt func(*misspellOptions)

func SetToolProvider(p tools.ToolProvider) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.ToolVersion = v
	}
}

// Debug matching, very slow
func Debug() MisspellOpt {
	return func(opts *misspellOptions) {
		opts.debug = ptrhelpers.Bool(true)
	}
}

// Exit with 2 if misspelling found
func Error() MisspellOpt {
	return func(opts *misspellOptions) {
		opts.error = ptrhelpers.Bool(true)
	}
}

// 'csv', 'sqlite3' or custom Golang template for output
func Format(value string) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.format = &value
	}
}

// ignore the following corrections
func IgnoredCorrections(value ...string) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.ignoredCorrections = value
	}
}

// Number of workers, 0 = number of CPUs
func Workers(value int) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.workers = &value
	}
}

// Correct spellings using locale preferences for US or UK.
// Default is to use a neutral variety of English.
// Setting locale to US will correct the British spelling of 'colour' to 'color'
func Locale(value string) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.locale = &value
	}
}

// output file or [stderr|stdout|] (default 'stdout')
func Output(value string) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.output = &value
	}
}

// Source mode: auto=guess, go=golang source, text=plain or markdown-like text (default "auto")
func Source(value string) MisspellOpt {
	return func(opts *misspellOptions) {
		opts.source = &value
	}
}

// Overwrite file with corrections (default is just to display)
func Write() MisspellOpt {
	return func(opts *misspellOptions) {
		opts.write = ptrhelpers.Bool(true)
	}
}

type misspellOptions struct {
	ToolProvider       tools.ToolProvider
	ToolVersion        string
	debug              *bool
	error              *bool
	format             *string
	ignoredCorrections []string
	workers            *int
	locale             *string
	output             *string
	source             *string
	write              *bool
}

func (o *misspellOptions) toArgs() []string {
	var renderedArgs []string

	if o.debug != nil {
		renderedArgs = append(renderedArgs, "-debug")
	}

	if o.error != nil {
		renderedArgs = append(renderedArgs, "-error")
	}

	if o.format != nil {
		renderedArgs = append(renderedArgs, "-f", fmt.Sprintf("%s", ptrhelpers.StringValue(o.format)))
	}

	if o.ignoredCorrections != nil {
		renderedArgs = append(renderedArgs, "-f", fmt.Sprintf("%s", strings.Join(o.ignoredCorrections, ",")))
	}

	if o.workers != nil {
		renderedArgs = append(renderedArgs, "-j", fmt.Sprintf("%v", ptrhelpers.IntValue(o.workers)))
	}

	if o.locale != nil {
		renderedArgs = append(renderedArgs, "-locale", fmt.Sprintf("%v", ptrhelpers.StringValue(o.locale)))
	}

	if o.output != nil {
		renderedArgs = append(renderedArgs, "-o", fmt.Sprintf("%s", ptrhelpers.StringValue(o.output)))
	}

	if o.source != nil {
		renderedArgs = append(renderedArgs, "-source", fmt.Sprintf("%s", ptrhelpers.StringValue(o.source)))
	}

	if o.write != nil {
		renderedArgs = append(renderedArgs, "-w")
	}

	return renderedArgs
}
