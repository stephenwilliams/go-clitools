// Generated by toolgen. DO NOT EDIT.
// Generated from tool specification:
//   _build/specifications/lefthook.json

package add

import (
	"github.com/stephenwilliams/go-clitools/internal/defaults"
	"github.com/stephenwilliams/go-clitools/tools"
	"github.com/stephenwilliams/go-clitools/tools/lefthook"
)

// This command will try to build the following structure in repository:
//
// ├───.git
// │   └───hooks
// │       └───pre-commit // this executable will be added. Existed file with
// │                      // same name will be renamed to pre-commit.old
// (lefthook add this dirs if you run command with -d option)
// │
// ├───.lefthook            // directory for project level hooks
// │   └───pre-commit     // directory with hooks executables
// ├───.lefthook-local      // directory for personal hooks add it in .gitignore
// │   └───pre-commit
func Add(hooksGroup string, opts ...AddOpt) *tools.CommandContext {
	options := &addOptions{}

	for _, optFunc := range opts {
		optFunc(options)
	}

	var _args []string
	_args = append(_args, "add")

	_args = append(_args, options.toArgs()...)
	_args = append(_args, hooksGroup)

	return &tools.CommandContext{
		Args: _args,
		Path: tools.MustResolveTool(lefthook.LefthookToolInfo, defaults.String(options.ToolVersion, lefthook.DefaultToolVersion), options.ToolProvider, lefthook.DefaultToolProvider, tools.DefaultToolProvider),
	}
}

type AddOpt func(*addOptions)

func SetToolProvider(p tools.ToolProvider) AddOpt {
	return func(opts *addOptions) {
		opts.ToolProvider = p
	}
}

func SetToolVersion(v string) AddOpt {
	return func(opts *addOptions) {
		opts.ToolVersion = v
	}
}

type addOptions struct {
	ToolProvider tools.ToolProvider
	ToolVersion  string
}

func (o *addOptions) toArgs() []string {
	var renderedArgs []string

	return renderedArgs
}
